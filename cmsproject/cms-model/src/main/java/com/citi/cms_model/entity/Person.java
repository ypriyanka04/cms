package com.citi.cms_model.entity;

import jakarta.persistence.Basic;
import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Lob;
import jakarta.persistence.OneToOne;
import jakarta.persistence.Table;
import jakarta.validation.constraints.Size;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;

import java.time.LocalDate;

/**
 * RootIdentity generated by hbm2java
 */
@Entity
@Table(name = "PERSON")
@NoArgsConstructor
@AllArgsConstructor
@Builder
@Getter
@Setter
@ToString
public class Person {
    private static final long serialVersionUID = 8930679453252477668L;
    @Id
    @Column(name = "PERSON_ID", unique = true, nullable = false)
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer personId;

    @Column(name = "UUID", length = 50)
    @Size(max = 50)
    private String uuid;

    @Column(name = "USERNAME", length = 50)
    @Size(max = 50)
    private String username;

    @Column(name = "PASSWORD", length = 50)
    @Size(max = 50)
    private String password;

    //    @OneToMany(fetch = FetchType.LAZY, mappedBy = "person")
    //    @Builder.Default
    //    private List<IdentityCardDetail> identityCardDetails = new ArrayList<>();

    @Column(name = "CELL_PHONE", length = 50)
    @Size(max = 50)
    private String cellPhone;

    @Column(name = "DATE_OF_BIRTH")
    private LocalDate dateOfBirth;

    @Column(name = "FACIAL_TOKEN_IMAGE")
    @Lob
    private byte[] facialTokenImage;

    @Column(name = "FIRST_NAME", length = 100, nullable = false)
    @Size(max = 100)
    private String firstName;

    @Column(name = "MIDDLE_NAME", length = 100)
    @Size(max = 100)
    private String middleName;

    @Column(name = "LAST_NAME", length = 100, nullable = false)
    @Size(max = 100)
    private String lastName;

    @Column(name = "GENDER", length = 1)
    @Size(max = 1)
    private String gender;

    @Column(name = "HOME_PHONE", length = 50)
    @Size(max = 50)
    private String homePhone;

    @Column(name = "SUFFIX", length = 20)
    @Size(max = 20)
    private String suffix;

    @Column(name = "EMAIL_ID", length = 100)
    @Size(max = 100)
    private String emailId;

    @Column(name = "BIOMETRIC_SYSTEM_ID", length = 50)
    @Size(max = 50)
    private String biometricSystemId;

    @Column(name = "MARITAL_STATUS", length = 100)
    @Size(max = 100)
    private String maritalStatus;

    @Column(name = "HAIR_COLOR", length = 50)
    @Size(max = 50)
    private String hairColor;

    @Column(name = "EYE_COLOR", length = 50)
    @Size(max = 50)
    private String eyeColor;

    @Column(name = "HEIGHT", length = 10)
    @Size(max = 10)
    private String height;

    @Column(name = "WEIGHT", length = 10)
    @Size(max = 10)
    private String weight;

    @Column(name = "CITY_OF_BIRTH", length = 100)
    @Size(max = 100)
    private String cityOfBirth;

    @Column(name = "COUNTRY_OF_BIRTH", length = 100)
    @Size(max = 100)
    private String countryOfBirth;

    @Column(name = "COUNTRY_OF_CITIZENSHIP", length = 100)
    @Size(max = 100)
    private String countryOfCitizenship;

    @Column(name = "COUNTRY_OF_ENROLLMENT", length = 100)
    @Size(max = 100)
    private String countryOfEnrollment;

    @Column(name = "JURISDICTION", length = 500)
    @Size(max = 500)
    private String jurisdiction;

    @Column(name = "ALTERNATE_EMAIL_ID", length = 100)
    @Size(max = 100)
    private String alternateEmailId;

    @Column(name = "SSN", length = 50)
    @Size(max = 50)
    private String ssn;

    @Column(name = "SIGNATURE")
    @Lob
    @Basic(fetch = FetchType.LAZY)
    private byte[] signature;

    @Column(name = "EMERGENCY_CONTACT_NAME", length = 100)
    @Size(max = 100)
    private String emergencyContactName;

    @Column(name = "EMERGENCY_CONTACT_RELATIONSHIP", length = 100)
    @Size(max = 100)
    private String emergencyContactRelationship;

    @Column(name = "EMERGENCY_CONTACT_EMAIL", length = 100)
    @Size(max = 100)
    private String emergencyContactEmail;

    @Column(name = "EMERGENCY_CONTACT_PHONE", length = 50)
    @Size(max = 50)
    private String emergencyContactPhone;

    @Column(name = "COMMUNICATION_PREFERENCE", length = 100)
    @Size(max = 100)
    private String communicationPreference;

    @Column(name = "ETHNICITY", length = 100)
    @Size(max = 100)
    private String ethnicity;

    //    @OneToOne(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "person")
    //    private PersonIrisInfo personIrisInfo;
    //
    //    @OneToOne(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "person")
    //    private PersonFaceInfo personFaceInfo;
    //
    //    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "person")
    //    @Builder.Default
    //    private List<PersonFingerPrintInfo> personFingerprintsInfos = new ArrayList<>(0);
    //
//    @OneToOne(cascade = CascadeType.PERSIST, fetch = FetchType.LAZY, mappedBy = "person")
//    private PersonAddressInfo personAddressInfo;

    @Column(name = "CREDENTIAL_PROFILE_ID")
    private int credentialProfileId;

    @Column(name = "STATUS")
    private String status;
}